[package]
name = "game-of-life"
version = "0.1.0"
authors = ["ryougi1 <shplankey@live.se>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"] 

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "0.2"
fixedbitset = "0.1.9" # For representing cells with bits
js-sys = "0.3" # For JS Math.random


# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.1", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.2"

# Required for console.log function
[dependencies.web-sys]
version = "0.3"
features = [
    "console",
]

[profile.release]
# Tell `rustc` to optimize for small code size.
# opt-level = "s"
# More aggressively optimize for size, results not consistent vs "s"
# opt-level = 'z'
# Give LLVM more opportunities to optimize. Smaller .wasm and also faster runtime. Slower compilation. 
lto = true

# Using the wasm-opt tool
# Different settings are: 
# Optimize for size:
# wasm-opt -Os -o output.wasm input.wasm
# wasm-opt -Oz -o output.wasm input.wasm
# Optimize for speed:
# wasm-opt -O -o output.wasm input.wasm
# wasm-opt -O3 -o output.wasm input.wasm
